                                                                //gfg practice solution

class Solution
{
    public:
    //Function to return the level order traversal of a tree.
    vector<int> levelOrder(Node* node)
    {
      //Your code here
      vector <int>ans;
      queue <Node*>q;
      
      q.push(node);
      if(node==NULL)
      return ans;
      
      while(!q.empty())
      {
          Node* temp=q.front();
          q.pop();
          ans.push_back(temp->data);
          if(temp->left!=NULL)
          q.push(temp->left);
          
          if(temp->right!=NULL)
          q.push(temp->right);
      }
      return ans;
    
      }
      
    
};

                                                                       //leetcode solution  question-102
                                                                       
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>>ans;
        queue<TreeNode*>q;

        q.push(root);
        if(root==NULL)
        return ans;

        while(1)
        {
            int size=q.size();
            if(size==0)
            return ans;

            vector <int>data;
            while(size>0)
            {
              TreeNode* temp=q.front();
              q.pop();
              data.push_back(temp->val);
              if(temp->left)
              q.push(temp->left);
              if(temp->right)
              q.push(temp->right);

              size--;
            }
            ans.push_back(data);
        }
        return ans;
    }
};
